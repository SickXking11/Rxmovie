import asyncio
import re
import os
import ast
import math, logging, time
from pyrogram.errors.exceptions.bad_request_400 import MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty
from Script import script
import pyrogram
from database.connections_mdb import active_connection, all_connections, delete_connection, if_active, make_active,  make_inactive
from info import DL_TIME, BTN, ADMINS, CUSTOM_FILE_CAPTION, AUTH_GROUPS, CHANNEL_LINK, GROUP_LINK, OWNER
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid
from utils import get_size, is_subscribed, search_gagala, temp, get_settings, save_group_settings
from database.users_chats_db import db
from database.ia_filterdb import Media, get_file_details, get_search_results, db as fdb
from database.filters_mdb import del_all, find_filter, get_filters
from plugins.fsub import ForceSub

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

BUTTONS = {}
SPELL_CHECK = {}
PM_BUTTONS = {}
PM_SPELL_CHECK = {}

@Client.on_message(filters.group & filters.text & filters.incoming & filters.chat(AUTH_GROUPS) if AUTH_GROUPS else filters.group & filters.text & filters.incoming)
async def give_filter(client, message):
    k = await manual_filters(client, message)
    if k == False:
        await auto_filter(client, message)

@Client.on_message(filters.private & filters.text & filters.incoming)
async def pm_give_filter(client, message):
    await pm_auto_filter(client, message)


@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data == "close_data":
        await query.message.delete()
       
    elif query.data.startswith("next"):
        await next_page(client, query)
        
    elif query.data.startswith("spolling"):
        await advantage_spoll_choker(client, query)
        
    elif query.data.startswith("pmnext"):
        await pm_next_page(client, query)
        
    elif query.data.startswith("pmspolling"):
        await pm_advantage_spoll_choker(client, query)
   
    elif query.data == "delallconfirm":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            grpid = await active_connection(str(userid))
            if grpid is not None:
                grp_id = grpid
                try:
                    chat = await client.get_chat(grpid)
                    title = chat.title
                except:
                    await query.message.edit_text("Make sure I'm present in your group!!", quote=True)
                    return await query.answer('Piracy Is Crime')
            else:
                await query.message.edit_text(
                    "I'm not connected to any groups!\nCheck /connections or connect to any groups",
                    quote=True
                )
                return await query.answer('Piracy Is Crime')

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            title = query.message.chat.title

        else:
            return await query.answer('Piracy Is Crime')

        st = await client.get_chat_member(grp_id, userid)
        if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
            await del_all(query.message, grp_id, title)
        else:
            await query.answer("You need to be Group Owner or an Auth User to do that!", show_alert=True)
    elif query.data == "delallcancel":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            await query.message.reply_to_message.delete()
            await query.message.delete()

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            st = await client.get_chat_member(grp_id, userid)
            if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
                await query.message.delete()
                try:
                    await query.message.reply_to_message.delete()
                except:
                    pass
            else:
                await query.answer("Bro Search Your Own File Don't Click Other Requested Files üòí", show_alert=True)
    elif "groupcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        act = query.data.split(":")[2]
        hr = await client.get_chat(int(group_id))
        title = hr.title
        user_id = query.from_user.id

        if act == "":
            stat = "CONNECT"
            cb = "connectcb"
        else:
            stat = "DISCONNECT"
            cb = "disconnect"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{stat}", callback_data=f"{cb}:{group_id}"),
             InlineKeyboardButton("DELETE", callback_data=f"deletecb:{group_id}")],
            [InlineKeyboardButton("BACK", callback_data="backcb")]
        ])

        await query.message.edit_text(
            f"Group Name : **{title}**\nGroup ID : `{group_id}`",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )
        return await query.answer('Piracy Is Crime')
    elif "connectcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title

        user_id = query.from_user.id

        mkact = await make_active(str(user_id), str(group_id))

        if mkact:
            await query.message.edit_text(
                f"Connected to **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text('Some error occurred!!', parse_mode=enums.ParseMode.MARKDOWN)
        return await query.answer('Piracy Is Crime')
    elif "disconnect" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title
        user_id = query.from_user.id

        mkinact = await make_inactive(str(user_id))

        if mkinact:
            await query.message.edit_text(
                f"Disconnected from **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text(
                f"Some error occurred!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('Piracy Is Crime')
    elif "deletecb" in query.data:
        await query.answer()

        user_id = query.from_user.id
        group_id = query.data.split(":")[1]

        delcon = await delete_connection(str(user_id), str(group_id))

        if delcon:
            await query.message.edit_text(
                "Successfully deleted connection"
            )
        else:
            await query.message.edit_text(
                f"Some error occurred!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('Piracy Is Crime')
    elif query.data == "backcb":
        await query.answer()

        userid = query.from_user.id

        groupids = await all_connections(str(userid))
        if groupids is None:
            await query.message.edit_text(
                "There are no active connections!! Connect to some groups first.",
            )
            return await query.answer('Piracy Is Crime')
        buttons = []
        for groupid in groupids:
            try:
                ttl = await client.get_chat(int(groupid))
                title = ttl.title
                active = await if_active(str(userid), str(groupid))
                act = " - ACTIVE" if active else ""
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{title}{act}", callback_data=f"groupcb:{groupid}:{act}"
                        )
                    ]
                )
            except:
                pass
        if buttons:
            await query.message.edit_text(
                "Your connected group details ;\n\n",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    elif "alertmessage" in query.data:
        grp_id = query.message.chat.id
        i = query.data.split(":")[1]
        keyword = query.data.split(":")[2]
        reply_text, btn, alerts, fileid = await find_filter(grp_id, keyword)
        if alerts is not None:
            alerts = ast.literal_eval(alerts)
            alert = alerts[int(i)]
            alert = alert.replace("\\n", "\n").replace("\\t", "\t")
            await query.answer(alert, show_alert=True)
            
    elif query.data.startswith("file"):
        ident, file_id = query.data.split("#")
        try:
            req = query.message.reply_to_message.from_user.id
            if int(req) not in [query.from_user.id, 0]:
                return await query.answer("Hey This Is Not For You. Please Search You Self", show_alert=True)
        except:
            pass
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist. ‡¥Ö‡¥Ø‡µç‡¥Ø‡µã‡¥ü‡¥æ ‡¥Æ‡µã‡¥®‡µÜ ‡¥Ü file ‡¥™‡µã‡¥Ø‡¥≤‡µç‡¥≤‡µã ‚òπÔ∏è. ‡¥í‡¥®‡µç‡¥®‡µÅ‡¥ï‡µÇ‡¥ü‡µÜ ‡¥ó‡µç‡¥∞‡µÇ‡¥™‡µç‡¥™‡¥ø‡µΩ ‡¥™‡µã‡¥Ø‡¥ø button ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Ç')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        settings = await get_settings(query.message.chat.id)
        f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title, file_size='' if size is None else size)
           
        try:
            if not await is_subscribed(client, query):
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            elif settings['botpm']:
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            else:
                await client.send_cached_media(
                    chat_id=query.from_user.id,
                    file_id=file_id,
                    caption=f_caption,
                    protect_content=True if ident == "filep" else False,
                    reply_markup=BTN
                )
                await query.answer('Check PM, I have sent files in pm', show_alert=True)
        except UserIsBlocked:
            await query.answer('Unblock the bot mahn !', show_alert=True)
        except PeerIdInvalid:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
        except Exception as e:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
     
    
    elif query.data.startswith("pmfile"):
        ident, file_id = query.data.split("#")
        
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist. ‡¥Ö‡¥Ø‡µç‡¥Ø‡µã‡¥ü‡¥æ ‡¥Æ‡µã‡¥®‡µÜ ‡¥Ü file ‡¥™‡µã‡¥Ø‡¥≤‡µç‡¥≤‡µã ‚òπÔ∏è. ‡¥í‡¥®‡µç‡¥®‡µÅ‡¥ï‡µÇ‡¥ü‡µÜ ‡¥ó‡µç‡¥∞‡µÇ‡¥™‡µç‡¥™‡¥ø‡µΩ ‡¥™‡µã‡¥Ø‡¥ø button ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        settings = await get_settings(query.message.chat.id)
        f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title, file_size='' if size is None else size)
        try:
            await client.send_cached_media(chat_id=query.from_user.id, file_id=file_id, caption=f_caption, reply_markup=BTN)
        except Exception as e:
            print(e)
           
    elif query.data.startswith("checksub"):
        if not await is_subscribed(client, query):
            await query.answer("I Like Your Smartness, But Don't Be Oversmart üòí.‡¥ö‡¥æ‡¥®‡µΩ subscribe ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥∂‡µá‡¥∑‡¥Ç Try Again ‡¥é‡¥®‡µç‡¥® ‡¥¨‡¥ü‡µç‡¥ü‡¥£‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï üòÅ", show_alert=True)
            return
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title, file_size='' if size is None else size)
        await client.send_cached_media(
            chat_id=query.from_user.id,
            file_id=file_id,
            caption=f_caption,
            protect_content=True if ident == 'checksubp' else False,
            reply_markup=BTN
        )
    elif query.data == "pages":
        await query.answer("Please Click Movie Button Only üôè", show_alert=True)

    elif query.data == "moviedl":
        await query.answer(script.MV_DL, show_alert=True)

    elif query.data == "nonmovie":
        await query.answer(script.NO_MV, show_alert=True)

    elif query.data == "start":
        buttons = [[ 
            InlineKeyboardButton('üîó ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü  ü…™…¥·¥ãs üîó', url=CHANNEL_LINK)
            ],[
            InlineKeyboardButton('üìØ ·¥ç è …¢ Ä·¥è·¥ú·¥ò', url=GROUP_LINK),
            InlineKeyboardButton('‚öíÔ∏è ·¥ç è ·¥è·¥°…¥·¥á Ä', url=OWNER)
            ],[
            InlineKeyboardButton('‚ö†Ô∏è  ú·¥á ü·¥ò', callback_data='help'),
            InlineKeyboardButton('‚öôÔ∏è ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
            ],[
            InlineKeyboardButton("‚ûïÔ∏è ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûïÔ∏è", url=f"http://t.me/{temp.U_NAME}?startgroup=true")
            ],[
            InlineKeyboardButton('üîç Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥ç·¥è·¥†…™·¥á üîé', switch_inline_query_current_chat='')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention, client.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        await query.answer('Piracy Is Crime')
    elif query.data == "help":
        buttons = [[
            InlineKeyboardButton('·¥ç·¥Ä…¥·¥ú·¥Ä ü “ì…™ ü·¥õ·¥á Ä', callback_data='manuelfilter'),
            InlineKeyboardButton('·¥Ä·¥ú·¥õ·¥è “ì…™ ü·¥õ·¥á Ä', callback_data='autofilter')
            ],[
            InlineKeyboardButton('·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥', callback_data='coct'),
            InlineKeyboardButton('·¥Ä·¥Ö·¥ç…™…¥ ·¥è…¥ ü è', callback_data='extra')
            ],[
            InlineKeyboardButton('üè†  ú·¥è·¥ç·¥á', callback_data='start'),
            InlineKeyboardButton('üîÆ s·¥õ·¥Ä·¥õ·¥ús', callback_data='stats')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.HELP_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "about":
        buttons = [[
            InlineKeyboardButton('‚ú®Ô∏è ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url=CHANNEL_LINK),
        ],[
            InlineKeyboardButton('üè†  ú·¥è·¥ç·¥á', callback_data='start'),
            InlineKeyboardButton('üîê ·¥Ñ ü·¥ès·¥á', callback_data='close_data')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.ABOUT_TXT.format(client.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "manuelfilter":
        buttons = [[
            InlineKeyboardButton(' ô·¥ú·¥õ·¥õ·¥è…¥ “ì·¥è Ä·¥ç·¥Ä·¥õ', callback_data='button')
            ],[
            InlineKeyboardButton('<  ô·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.MANUELFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "button":
        buttons = [[
            InlineKeyboardButton('<  ô·¥Ä·¥Ñ·¥ã', callback_data='manuelfilter')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.BUTTON_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "autofilter":
        buttons = [[
            InlineKeyboardButton('<  ô·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.AUTOFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "coct":
        buttons = [[
            InlineKeyboardButton('<  ô·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.CONNECTION_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "extra":
        buttons = [[
            InlineKeyboardButton('<  ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥ç·¥Ö', callback_data='admin')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.EXTRAMOD_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )  
    elif query.data == "admin":
        if query.from_user.id in ADMINS:        
            await query.message.edit_text(text=script.ADMIN_TXT, reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton('üë©‚Äçü¶Ø  ô·¥Ä·¥Ñ·¥ã', callback_data='extra')]]), parse_mode=enums.ParseMode.HTML)
        else:         
            await query.answer("ùöÇùôæùöÅùöÅùöà ùô≥ùöÑùô≥ùô¥ ùöàùôæùöÑ'ùöÅ ùôΩùôæùöÉ ùô∞ùô≥ùôºùô∏ùôΩ", show_alert=True)                      
    elif query.data == "stats":
        await query.answer("Fetching MongoDb DataBase")
        buttons = [[
            InlineKeyboardButton('<  ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('‚ôªÔ∏è  Ä·¥á“ì Ä·¥ás ú', callback_data='stats')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        total = await Media.count_documents()
        fmonsize = (await fdb.command("dbstats"))['dataSize']
        ffree = 536870912 - fmonsize
        fmonsize = get_size(fmonsize)
        ffree = get_size(ffree)
        users = await db.total_users_count()
        chats = await db.total_chat_count()
        monsize = await db.get_db_size()
        free = 536870912 - monsize
        monsize = get_size(monsize)
        free = get_size(free)
        await query.message.edit_text("·¥°·¥Ä…™·¥õ.....")
        await query.message.edit_text(
            text=script.STATUS_TXT.format(
                users=users,
                chats=chats,
                used=monsize,
                free=free,
                total=total,
                fused=fmonsize,
                ffree=ffree),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data.startswith("setgs"):
        ident, set_type, status, grp_id = query.data.split("#")
        grpid = await active_connection(str(query.from_user.id))

        if str(grp_id) != str(grpid):
            await query.message.edit("Your Active Connection Has Been Changed. Go To /settings.")
            return await query.answer('Piracy Is Crime')

        if status == "True":
            await save_group_settings(grpid, set_type, False)
        else:
            await save_group_settings(grpid, set_type, True)

        settings = await get_settings(grpid)

        if settings is not None:
            buttons = [[
                InlineKeyboardButton(' ô·¥ú·¥õ·¥õ·¥è…¥', callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                InlineKeyboardButton('s…™…¥…¢ ü·¥á' if settings["button"] else '·¥Ö·¥è·¥ú ô ü·¥á', callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],[
                InlineKeyboardButton(' ô·¥è·¥õ ·¥ò·¥ç', callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}'),
                InlineKeyboardButton('‚úÖ ·¥è…¥' if settings["botpm"] else '‚ùå ·¥è“ì“ì', callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}')
                ],[
                InlineKeyboardButton(' Ä·¥ás·¥õ Ä…™·¥Ñ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ', callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}'),
                InlineKeyboardButton('‚úÖ ·¥è…¥' if settings["file_secure"] else '‚ùå ·¥è“ì“ì', callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}')
                ],[
                InlineKeyboardButton('s·¥ò·¥á ü ü ·¥Ñ ú·¥á·¥Ñ·¥ã', callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                InlineKeyboardButton('‚úÖ ·¥è…¥' if settings["spell_check"] else '‚ùå ·¥è“ì“ì', callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],[
                InlineKeyboardButton('·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á', callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}'),
                InlineKeyboardButton('‚úÖ ·¥è…¥' if settings["welcome"] else '‚ùå ·¥è“ì“ì', callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}')
            ]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_reply_markup(reply_markup)
    await query.answer('Piracy Is Crime')


async def auto_filter(client, msg, spoll=False):
    if not spoll:
        message = msg
        settings = await get_settings(message.chat.id)
        if message.text.startswith("/"): return  # ignore commands
        if re.findall("((^\/|^,|^!|^\.|^[\U0001F600-\U000E007F]).*)", message.text):
            return
        if 2 < len(message.text) < 100:
            search = message.text
            files, offset, total_results = await get_search_results(search.lower(), offset=0, filter=True)
            if not files:
                if settings["spell_check"]:
                    return await advantage_spell_chok(msg)
                else:
                    return
        else:
            return
    else:
        settings = await get_settings(msg.message.chat.id)
        message = msg.message.reply_to_message  # msg will be callback query
        search, files, offset, total_results = spoll
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings["button"]:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"[{get_size(file.file_size)}]üîπ{file.file_name}", callback_data=f'{pre}#{file.file_id}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}",
                    callback_data=f'{pre}#{file.file_id}',
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'{pre}#{file.file_id}',
                ),
            ]
            for file in files
        ]
    btn.insert(0, 
        [
            InlineKeyboardButton("‚ùÑÔ∏é ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ ‚ùÑÔ∏é", url="https://t.me/downloadmovieshow/2")
        ]
    )

    if offset != "":
        key = f"{message.chat.id}-{message.id}"
        BUTTONS[key] = search
        req = message.from_user.id if message.from_user else 0
        btn.append(
            [InlineKeyboardButton(text=f"üóì 1/{math.ceil(int(total_results) / 10)}", callback_data="pages"),
             InlineKeyboardButton(text="…¥·¥áx·¥õ ‚è©", callback_data=f"next_{req}_{key}_{offset}")]
        )
    else:
        btn.append(
            [InlineKeyboardButton(text="üóì 1/1", callback_data="pages")]
        )
    
    cap = f"Here is what i found for your query {search}"
    try:
        ab=await message.reply_text(text=cap, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True) 
        if spoll: await msg.message.delete()
        await asyncio.sleep(DL_TIME)
        await ab.delete()   
    except FloodWait:
        await asyncio.sleep(FloodWait.value)
        ab=await message.reply_text(text=cap, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True) 
        if spoll: await msg.message.delete()
        await asyncio.sleep(DL_TIME)
        await ab.delete()   
    except Exception as e:
        logger.exception(e)
        cd=await message.reply_text(cap, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True)
        if spoll: await msg.message.delete()
        await asyncio.sleep(DL_TIME)
        await cd.delete()     
   
  
  
async def pm_auto_filter(client, msg, spoll=False):
    if not await is_subscribed(client, msg):
        return await ForceSub(client, msg)
        
    if not spoll:
        message = msg
        if message.text.startswith("/"): return  # ignore commands
        if re.findall("((^\/|^,|^!|^\.|^[\U0001F600-\U000E007F]).*)", message.text): return
        if not 2 < len(message.text) < 100: return 
        search = message.text
        files, offset, total_results = await get_search_results(search.lower(), offset=0, filter=True)
        if not files:
            return await pm_advantage_spell_chok(msg)
                
    else:
        message = msg.message.reply_to_message  # msg will be callback query
        search, files, offset, total_results = spoll
       
    btn = [[
        InlineKeyboardButton(text=f"[{get_size(file.file_size)}]üîπ{file.file_name}", callback_data=f"pmfile#{file.file_id}"),
    ] for file in files]
        
    btn.insert(0, 
        [InlineKeyboardButton("‚ùÑÔ∏é ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ ‚ùÑÔ∏é", url="https://t.me/downloadmovieshow/2")]
    )

    if offset != "":
        key = f"{message.chat.id}-{message.id}"
        PM_BUTTONS[key] = search
        req = message.from_user.id if message.from_user else 0
        btn.append(
            [InlineKeyboardButton(text=f"üóì 1/{math.ceil(int(total_results) / 10)}", callback_data="pages"),
             InlineKeyboardButton(text="…¥·¥áx·¥õ ‚è©", callback_data=f"pmnext_{req}_{key}_{offset}")]
        )
    else:
        btn.append(
            [InlineKeyboardButton(text="üóì 1/1", callback_data="pages")]
        )
    
    cap = f"Here is what i found for your query {search}"
    try:
        ab=await message.reply_text(text=cap, quote=True, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True) 
        if spoll: await msg.message.delete()
        await asyncio.sleep(DL_TIME)
        await ab.delete()   
    except FloodWait:
        await asyncio.sleep(FloodWait.value)
        ab=await message.reply_text(text=cap, quote=True, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True) 
        if spoll: await msg.message.delete()
        await asyncio.sleep(DL_TIME)
        await ab.delete()   
    except Exception as e:
        logger.exception(e)
        cd=await message.reply_text(cap, quote=True, reply_markup=InlineKeyboardMarkup(btn), disable_web_page_preview=True)
        if spoll: await msg.message.delete()
        await asyncio.sleep(DL_TIME)
        await cd.delete()     
    



async def advantage_spell_chok(msg):
    query = re.sub(
        r"\b(pl(i|e)*?(s|z+|ease|se|ese|(e+)s(e)?)|((send|snd|giv(e)?|gib)(\sme)?)|movie(s)?|new|latest|br((o|u)h?)*|^h(e|a)?(l)*(o)*|mal(ayalam)?|t(h)?amil|file|that|find|und(o)*|kit(t(i|y)?)?o(w)?|thar(u)?(o)*w?|kittum(o)*|aya(k)*(um(o)*)?|full\smovie|any(one)|with\ssubtitle(s)?)",
        "", msg.text, flags=re.IGNORECASE)  # plis contribute some common words
    query = query.strip() + " movie"
    try:
        g_s = await search_gagala(query)
    except Exception as e:
        print(e)
    #g_s += await search_gagala(msg.text)
    gs_parsed = []
    if not g_s:
        k = await msg.reply(
            text="""‚úØ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥ö‡µã‡¥¶‡¥ø‡¥ö‡µç‡¥ö ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥±‡¥ø‡¥≤‡µÄ‡¥∏‡µç ‡¥Ü‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µã..? \n\n‚úØ ùóúùó≥ ùó∂ùòÅ ùó∂ùòÄ , ùó™ùó≤ ùó™ùó∂ùóπùóπ ùó®ùóΩùóπùóºùóÆùó± ùóúùòÅ‚ö°Ô∏è\n\nüìØ…¥ ô: C ü…™·¥Ñ·¥ã B·¥á ü·¥è·¥° R·¥á·¥Äs·¥è…¥s B·¥ú·¥õ·¥õ·¥è…¥""",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="‚òÖ ùó•ùóòùóîùó¶ùó¢ùó°ùó¶ ‚òÖ", callback_data="nonmovie")]])
        )
        await asyncio.sleep(20)
        return await k.delete()
    regex = re.compile(r".*(imdb|wikipedia).*", re.IGNORECASE)  # look for imdb / wiki results
    gs = list(filter(regex.match, g_s))
    gs_parsed = [re.sub(
        r'\b(\-([a-zA-Z-\s])\-\simdb|(\-\s)?imdb|(\-\s)?wikipedia|\(|\)|\-|reviews|full|all|episode(s)?|film|movie|series)',
        '', i, flags=re.IGNORECASE) for i in gs]
    if not gs_parsed:
        reg = re.compile(r"watch(\s[a-zA-Z0-9_\s\-\(\)]*)*\|.*",
                         re.IGNORECASE)  # match something like Watch Niram | Amazon Prime
        for mv in g_s:
            match = reg.match(mv)
            if match:
                gs_parsed.append(match.group(1))
    user = msg.from_user.id if msg.from_user else 0
    movielist = []
    gs_parsed = list(dict.fromkeys(gs_parsed))  # removing duplicates https://stackoverflow.com/a/7961425
    if len(gs_parsed) > 3:
        gs_parsed = gs_parsed[:3]
    if gs_parsed:
        try: from imdb import IMDb
        except: pass
        for mov in gs_parsed: 
            mov = mov.strip()
            imdb_s = IMDb().search_movie(mov.lower(), results=10)
            if imdb_s:
                movielist += [movie.get('title') for movie in imdb_s]
            
    movielist += [(re.sub(r'(\-|\(|\)|_)', '', i, flags=re.IGNORECASE)).strip() for i in gs_parsed]
    movielist = list(dict.fromkeys(movielist))  # removing duplicates
    if not movielist:
        k = await msg.reply("""<b>‚ÄºÔ∏è FILE NOT FOUND ? ‚ÄºÔ∏è

I couldn't find anything related to that. Check your spelling.

1‚É£ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ type ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥∏‡µç‡¥™‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥ô‡µç‡¥ô‡µç ‡¥ó‡µÇ‡¥ó‡¥ø‡¥≥‡¥ø‡µΩ ‡¥â‡¥≥‡µç‡¥≥‡¥§‡µç ‡¥™‡µã‡¥≤‡µÜ ‡¥Ü‡¥£‡µã ‡¥é‡¥®‡µç‡¥®‡µç ‡¥â‡¥±‡¥™‡µç‡¥™‡µç ‡¥µ‡¥∞‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï.

2‚É£ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥ö‡µã‡¥¶‡¥ø‡¥ö‡µç‡¥ö ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ OTT ‡¥±‡¥ø‡¥≤‡µÄ‡¥∏‡µç ‡¥Ü‡¥Ø‡¥§‡¥æ‡¥£‡µã ‡¥é‡¥®‡µç‡¥®‡µç ‡¥ö‡µÜ‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.

3‚É£ ‡¥Æ‡µÇ‡¥µ‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥ø ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥Æ‡µÇ‡¥µ‡¥ø‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥™‡µá‡¥∞‡µç ‡¥á‡¥±‡¥ô‡µç‡¥ô‡¥ø‡¥Ø ‡¥µ‡µº‡¥∑‡¥Ç ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï..!!</b>""")
        await asyncio.sleep(8)
        await k.delete()
        return
    SPELL_CHECK[msg.id] = movielist
    btn = [[
        InlineKeyboardButton(
            text=movie.strip(),
            callback_data=f"spolling#{user}#{k}",
        )
    ] for k, movie in enumerate(movielist)]
    btn.append([InlineKeyboardButton(text="Close", callback_data=f'spolling#{user}#close_spellcheck')])
    abir=await msg.reply("<b>‚úØ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥â‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ø‡¥ö‡µç‡¥ö ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥§‡¥æ‡¥¥‡µÜ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥≤‡µç‡¥≤‡¥§‡µÅ‡¥Ç ‡¥Ü‡¥£‡µç ‡¥é‡¥ô‡µç‡¥ï‡¥ø‡µΩ.‡¥Ö‡¥§‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï \n\n‚úØ …™ ·¥Ñ·¥è·¥ú ü·¥Ö…¥'·¥õ Íú∞…™…¥·¥Ö ·¥Ä…¥ è·¥õ ú…™…¥…¢  Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥Ä·¥õ ·¥Ö…™·¥Ö  è·¥è·¥ú ·¥ç·¥á·¥Ä…¥ ·¥Ä…¥ è ·¥è…¥·¥á ·¥èÍú∞ ·¥õ ú·¥áÍú±·¥á?\n\nüìØ ùó°ùóï : ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ·¥è…¥ ü è ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á  è·¥á·¥Ä Ä  ô·¥ú·¥õ·¥õ·¥è…¥.</b>",
                    reply_markup=InlineKeyboardMarkup(btn))
    await asyncio.sleep(DL_TIME)
    await abir.delete()    



async def pm_advantage_spell_chok(msg):
    query = re.sub(
        r"\b(pl(i|e)*?(s|z+|ease|se|ese|(e+)s(e)?)|((send|snd|giv(e)?|gib)(\sme)?)|movie(s)?|new|latest|br((o|u)h?)*|^h(e|a)?(l)*(o)*|mal(ayalam)?|t(h)?amil|file|that|find|und(o)*|kit(t(i|y)?)?o(w)?|thar(u)?(o)*w?|kittum(o)*|aya(k)*(um(o)*)?|full\smovie|any(one)|with\ssubtitle(s)?)",
        "", msg.text, flags=re.IGNORECASE)  # plis contribute some common words
    query = query.strip() + " movie"
    try:
        g_s = await search_gagala(query)
    except Exception as e:
        print(e)
    #g_s += await search_gagala(msg.text)
    gs_parsed = []
    if not g_s:
        k = await msg.reply(
            text="""‚úØ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥ö‡µã‡¥¶‡¥ø‡¥ö‡µç‡¥ö ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥±‡¥ø‡¥≤‡µÄ‡¥∏‡µç ‡¥Ü‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µã..? \n\n‚úØ ùóúùó≥ ùó∂ùòÅ ùó∂ùòÄ , ùó™ùó≤ ùó™ùó∂ùóπùóπ ùó®ùóΩùóπùóºùóÆùó± ùóúùòÅ‚ö°Ô∏è\n\nüìØ…¥ ô: C ü…™·¥Ñ·¥ã B·¥á ü·¥è·¥° R·¥á·¥Äs·¥è…¥s B·¥ú·¥õ·¥õ·¥è…¥""",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="‚òÖ ùó•ùóòùóîùó¶ùó¢ùó°ùó¶ ‚òÖ", callback_data="nonmovie")]])
        )
        await asyncio.sleep(20)
        return await k.delete()
    regex = re.compile(r".*(imdb|wikipedia).*", re.IGNORECASE)  # look for imdb / wiki results
    gs = list(filter(regex.match, g_s))
    gs_parsed = [re.sub(
        r'\b(\-([a-zA-Z-\s])\-\simdb|(\-\s)?imdb|(\-\s)?wikipedia|\(|\)|\-|reviews|full|all|episode(s)?|film|movie|series)',
        '', i, flags=re.IGNORECASE) for i in gs]
    if not gs_parsed:
        reg = re.compile(r"watch(\s[a-zA-Z0-9_\s\-\(\)]*)*\|.*",
                         re.IGNORECASE)  # match something like Watch Niram | Amazon Prime
        for mv in g_s:
            match = reg.match(mv)
            if match:
                gs_parsed.append(match.group(1))
    user = msg.from_user.id if msg.from_user else 0
    movielist = []
    gs_parsed = list(dict.fromkeys(gs_parsed))  # removing duplicates https://stackoverflow.com/a/7961425
    if len(gs_parsed) > 3:
        gs_parsed = gs_parsed[:3]
    if gs_parsed:
        try: from imdb import IMDb
        except: pass
        for mov in gs_parsed: 
            mov = mov.strip()
            imdb_s = IMDb().search_movie(mov.lower(), results=10)
            if imdb_s:
                movielist += [movie.get('title') for movie in imdb_s]
            
    movielist += [(re.sub(r'(\-|\(|\)|_)', '', i, flags=re.IGNORECASE)).strip() for i in gs_parsed]
    movielist = list(dict.fromkeys(movielist))  # removing duplicates
    if not movielist:
        k = await msg.reply("""<b>‚ÄºÔ∏è FILE NOT FOUND ? ‚ÄºÔ∏è

I couldn't find anything related to that. Check your spelling.

1‚É£ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ type ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥∏‡µç‡¥™‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥ô‡µç‡¥ô‡µç ‡¥ó‡µÇ‡¥ó‡¥ø‡¥≥‡¥ø‡µΩ ‡¥â‡¥≥‡µç‡¥≥‡¥§‡µç ‡¥™‡µã‡¥≤‡µÜ ‡¥Ü‡¥£‡µã ‡¥é‡¥®‡µç‡¥®‡µç ‡¥â‡¥±‡¥™‡µç‡¥™‡µç ‡¥µ‡¥∞‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï.

2‚É£ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥ö‡µã‡¥¶‡¥ø‡¥ö‡µç‡¥ö ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ OTT ‡¥±‡¥ø‡¥≤‡µÄ‡¥∏‡µç ‡¥Ü‡¥Ø‡¥§‡¥æ‡¥£‡µã ‡¥é‡¥®‡µç‡¥®‡µç ‡¥ö‡µÜ‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.

3‚É£ ‡¥Æ‡µÇ‡¥µ‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥ø ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥Æ‡µÇ‡¥µ‡¥ø‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥™‡µá‡¥∞‡µç ‡¥á‡¥±‡¥ô‡µç‡¥ô‡¥ø‡¥Ø ‡¥µ‡µº‡¥∑‡¥Ç ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï..!!</b>""")
        await asyncio.sleep(8)
        await k.delete()
        return
    PM_SPELL_CHECK[msg.id] = movielist
    btn = [[
        InlineKeyboardButton(
            text=movie.strip(),
            callback_data=f"pmspolling#{user}#{k}",
        )
    ] for k, movie in enumerate(movielist)]
    btn.append([InlineKeyboardButton(text="Close", callback_data=f'spolling#{user}#close_spellcheck')])
    abir=await msg.reply("<b>‚úØ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥â‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ø‡¥ö‡µç‡¥ö ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥§‡¥æ‡¥¥‡µÜ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥≤‡µç‡¥≤‡¥§‡µÅ‡¥Ç ‡¥Ü‡¥£‡µç ‡¥é‡¥ô‡µç‡¥ï‡¥ø‡µΩ.‡¥Ö‡¥§‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï \n\n‚úØ …™ ·¥Ñ·¥è·¥ú ü·¥Ö…¥'·¥õ Íú∞…™…¥·¥Ö ·¥Ä…¥ è·¥õ ú…™…¥…¢  Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥Ä·¥õ ·¥Ö…™·¥Ö  è·¥è·¥ú ·¥ç·¥á·¥Ä…¥ ·¥Ä…¥ è ·¥è…¥·¥á ·¥èÍú∞ ·¥õ ú·¥áÍú±·¥á?\n\nüìØ ùó°ùóï : ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ·¥è…¥ ü è ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á  è·¥á·¥Ä Ä  ô·¥ú·¥õ·¥õ·¥è…¥.</b>",
                    quote=True, reply_markup=InlineKeyboardMarkup(btn))
    await asyncio.sleep(DL_TIME)
    await abir.delete()    




async def manual_filters(client, message, text=False):
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_filters(group_id)
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_filter(group_id, keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")                     
            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            owl=await client.send_message(
                                group_id, 
                                reply_text, 
                                disable_web_page_preview=True,
                                reply_to_message_id=reply_id)
                            await asyncio.sleep(DL_TIME)
                            await owl.delete()     
                        else:
                            button = eval(btn)
                            dark=await client.send_message(
                                group_id,
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button),
                                reply_to_message_id=reply_id
                            )
                            await asyncio.sleep(DL_TIME)
                            await dark.delete()     
                    elif btn == "[]":
                        fkk=await client.send_cached_media(
                            group_id,
                            fileid,
                            caption=reply_text or "",
                            reply_to_message_id=reply_id
                        )
                        await asyncio.sleep(DL_TIME)
                        await fkk.delete()     
                    else:
                        button = eval(btn)
                        njan=await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button),
                            reply_to_message_id=reply_id
                        )
                        await asyncio.sleep(DL_TIME)
                        await njan.delete()     
                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False


async def next_page(bot, query):
    ident, req, key, offset = query.data.split("_")
    if int(req) not in [query.from_user.id, 0]:
        return await query.answer("Bro Search Your Own Don't Click Other Requested Files üòí", show_alert=True)
    try:
        offset = int(offset)
    except:
        offset = 0
    search = BUTTONS.get(key)
    if not search:
        await query.answer("You are using one of my old messages, please send the request again.", show_alert=True)
        return

    files, n_offset, total = await get_search_results(search, offset=offset, filter=True)
    try:
        n_offset = int(n_offset)
    except:
        n_offset = 0

    if not files:
        return
    settings = await get_settings(query.message.chat.id)
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"[{get_size(file.file_size)}]üîπ{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
    btn.insert(0, 
        [
            InlineKeyboardButton("‚ùÑÔ∏é ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ ‚ùÑÔ∏é", url="https://t.me/downloadmovieshow/2")
        ]
    )

    if 0 < offset <= 10:
        off_set = 0
    elif offset == 0:
        off_set = None
    else:
        off_set = offset - 10
    if n_offset == 0:
        btn.append(
            [InlineKeyboardButton("‚è™  ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
             InlineKeyboardButton(f"üìÉ ·¥©·¥Ä…¢·¥áÍú± {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}",
                                  callback_data="pages")]
        )
    elif off_set is None:
        btn.append(
            [InlineKeyboardButton(f"üóì {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}", callback_data="pages"),
             InlineKeyboardButton("…¥·¥áx·¥õ ‚è©", callback_data=f"next_{req}_{key}_{n_offset}")])
    else:
        btn.append(
            [
                InlineKeyboardButton("‚è™  ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
                InlineKeyboardButton(f"üóì {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}", callback_data="pages"),
                InlineKeyboardButton("…¥·¥áx·¥õ ‚è©", callback_data=f"next_{req}_{key}_{n_offset}")
            ],
        )
    try:
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(btn)
        )
    except MessageNotModified:
        pass
    await query.answer()


async def pm_next_page(bot, query):
    ident, req, key, offset = query.data.split("_")
    if int(req) not in [query.from_user.id, 0]:
        return await query.answer("Bro Search Your Own Don't Click Other Requested Files üòí", show_alert=True)
    try:
        offset = int(offset)
    except:
        offset = 0
    search = PM_BUTTONS.get(key)
    if not search:
        await query.answer("You are using one of my old messages, please send the request again.", show_alert=True)
        return

    files, n_offset, total = await get_search_results(search, offset=offset, filter=True)
    try:
        n_offset = int(n_offset)
    except:
        n_offset = 0

    if not files:
        return
    
    btn = [[
        InlineKeyboardButton(text=f"[{get_size(file.file_size)}]üîπ{file.file_name}", callback_data=f"pmfile#{file.file_id}"),
    ] for file in files]
        
    btn.insert(0, 
        [InlineKeyboardButton("‚ùÑÔ∏é ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ ‚ùÑÔ∏é", url="https://t.me/downloadmovieshow/2")]
    )

    if 0 < offset <= 10:
        off_set = 0
    elif offset == 0:
        off_set = None
    else:
        off_set = offset - 10
    if n_offset == 0:
        btn.append(
            [InlineKeyboardButton("‚è™  ô·¥Ä·¥Ñ·¥ã", callback_data=f"pmnext_{req}_{key}_{off_set}"),
             InlineKeyboardButton(f"üìÉ ·¥©·¥Ä…¢·¥áÍú± {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}",
                                  callback_data="pages")]
        )
    elif off_set is None:
        btn.append(
            [InlineKeyboardButton(f"üóì {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}", callback_data="pages"),
             InlineKeyboardButton("…¥·¥áx·¥õ ‚è©", callback_data=f"pmnext_{req}_{key}_{n_offset}")])
    else:
        btn.append(
            [
                InlineKeyboardButton("‚è™  ô·¥Ä·¥Ñ·¥ã", callback_data=f"pmnext_{req}_{key}_{off_set}"),
                InlineKeyboardButton(f"üóì {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}", callback_data="pages"),
                InlineKeyboardButton("…¥·¥áx·¥õ ‚è©", callback_data=f"pmnext_{req}_{key}_{n_offset}")
            ],
        )
    try:
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(btn)
        )
    except MessageNotModified:
        pass
    await query.answer()


async def advantage_spoll_choker(bot, query):
    _, user, movie_ = query.data.split('#')
    if int(user) != 0 and query.from_user.id != int(user):
        return await query.answer("Bro Search Your Own Don't Click Other Requested Files üòí", show_alert=True)
    if movie_ == "close_spellcheck":
        return await query.message.delete()
    movies = SPELL_CHECK.get(query.message.reply_to_message.id)
    if not movies:
        return await query.answer("You are clicking on an old button which is expired. ‡¥¨‡µç‡¥∞‡µã ‡¥Æ‡¥±‡µç‡¥±‡µÅ‡¥≥‡µç‡¥≥‡¥µ‡µº ‡¥±‡¥ø‡¥ï‡µç‡¥Ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥Æ‡µÇ‡¥µ‡¥ø‡¥Ø‡¥ø‡µΩ ‡¥ï‡µÅ‡¥§‡µç‡¥§‡¥ø ‡¥®‡µã‡¥ï‡µç‡¥ï‡¥æ‡¥§‡µÜ ‡¥¨‡µç‡¥∞‡µã‡¥®‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥§‡µç ‡¥¨‡µç‡¥∞‡µã ‡¥±‡¥ø‡¥ï‡µç‡¥Ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.ü§í ", show_alert=True)
    movie = movies[(int(movie_))]
    await query.answer('Checking for Movie in database...')
    k = await manual_filters(bot, query.message, text=movie)
    if k == False:
        files, offset, total_results = await get_search_results(movie, offset=0, filter=True)
        if files:
            k = (movie, files, offset, total_results)
            await auto_filter(bot, query, k)
        else:
            k = await query.message.edit('This Movie Not Found In DataBase. Sorry ‡¥Ü ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥ö‡¥ø‡¥≤‡¥™‡µç‡¥™‡µã‡µæ release ‡¥Ü‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡¥æ‡¥µ‡¥ø‡¥≤‡µç‡¥≤. ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥Ö‡¥§‡µç ‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ database ‡¥á‡µΩ ‡¥á‡¥≤‡µç‡¥≤ üôèü•∫')
            await asyncio.sleep(10)
            await k.delete()


async def pm_advantage_spoll_choker(bot, query):
    _, user, movie_ = query.data.split('#')
    if int(user) != 0 and query.from_user.id != int(user):
        return await query.answer("Bro Search Your Own Don't Click Other Requested Files üòí", show_alert=True)
    if movie_ == "close_spellcheck":
        return await query.message.delete()
    movies = PM_SPELL_CHECK.get(query.message.reply_to_message.id)
    if not movies:
        return await query.answer("You are clicking on an old button which is expired. ‡¥¨‡µç‡¥∞‡µã ‡¥Æ‡¥±‡µç‡¥±‡µÅ‡¥≥‡µç‡¥≥‡¥µ‡µº ‡¥±‡¥ø‡¥ï‡µç‡¥Ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥Æ‡µÇ‡¥µ‡¥ø‡¥Ø‡¥ø‡µΩ ‡¥ï‡µÅ‡¥§‡µç‡¥§‡¥ø ‡¥®‡µã‡¥ï‡µç‡¥ï‡¥æ‡¥§‡µÜ ‡¥¨‡µç‡¥∞‡µã‡¥®‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥§‡µç ‡¥¨‡µç‡¥∞‡µã ‡¥±‡¥ø‡¥ï‡µç‡¥Ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.ü§í ", show_alert=True)
    movie = movies[(int(movie_))]
    await query.answer('Checking for Movie in database...')
    
    files, offset, total_results = await get_search_results(movie, offset=0, filter=True)
    if files:
        k = (movie, files, offset, total_results)
        await pm_auto_filter(bot, query, k)
    else:
        k = await query.message.edit('This Movie Not Found In DataBase. Sorry ‡¥Ü ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥ö‡¥ø‡¥≤‡¥™‡µç‡¥™‡µã‡µæ release ‡¥Ü‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡¥æ‡¥µ‡¥ø‡¥≤‡µç‡¥≤. ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥Ö‡¥§‡µç ‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ database ‡¥á‡µΩ ‡¥á‡¥≤‡µç‡¥≤ üôèü•∫')
        await asyncio.sleep(10)
        await k.delete()





